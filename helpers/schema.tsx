/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type GameStatus = "not_started" | "in_progress" | "completed" | "on_hold";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Games {
  backgroundImage: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  developers: string[] | null;
  genres: string[] | null;
  id: Generated<number>;
  imageUrl: string | null;
  name: string;
  platforms: string[] | null;
  publishers: string[] | null;
  rating: Numeric | null;
  rawgId: number | null;
  released: Timestamp | null;
  slug: string | null;
  status: Generated<GameStatus>;
  updatedAt: Generated<Timestamp | null>;
}

export interface Notes {
  content: string;
  createdAt: Generated<Timestamp | null>;
  gameId: number;
  id: Generated<number>;
  title: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface Solutions {
  aiGenerated: Generated<boolean | null>;
  createdAt: Generated<Timestamp | null>;
  gameId: number;
  id: Generated<number>;
  problem: string;
  solution: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  games: Games;
  notes: Notes;
  solutions: Solutions;
}

// Supabase Database type
export type Database = {
  public: {
    Tables: {
      games: {
        Row: Games;
        Insert: Omit<Games, 'id' | 'createdAt' | 'updatedAt' | 'status'> & {
          id?: number;
          createdAt?: string;
          updatedAt?: string;
          status?: GameStatus;
        };
        Update: Partial<Omit<Games, 'id' | 'createdAt' | 'updatedAt'>>;
      };
      notes: {
        Row: Notes;
        Insert: Omit<Notes, 'id' | 'createdAt' | 'updatedAt'> & {
          id?: number;
          createdAt?: string;
          updatedAt?: string;
        };
        Update: Partial<Omit<Notes, 'id' | 'createdAt' | 'updatedAt'>>;
      };
      solutions: {
        Row: Solutions;
        Insert: Omit<Solutions, 'id' | 'createdAt' | 'updatedAt' | 'aiGenerated'> & {
          id?: number;
          createdAt?: string;
          updatedAt?: string;
          aiGenerated?: boolean;
        };
        Update: Partial<Omit<Solutions, 'id' | 'createdAt' | 'updatedAt'>>;
      };
    };
    Views: {};
    Functions: {};
    Enums: {
      game_status: GameStatus;
    };
  };
};


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const GameStatusArrayValues: [GameStatus, ...GameStatus[]] = ["not_started","in_progress","completed","on_hold"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.