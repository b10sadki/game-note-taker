/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type GameStatus = "abandoned" | "backlog" | "completed" | "in_progress";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Games {
  backgroundImage: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  developers: string[] | null;
  genres: string[] | null;
  id: Generated<number>;
  imageUrl: string | null;
  name: string;
  platforms: string[] | null;
  publishers: string[] | null;
  rating: Numeric | null;
  rawgId: number | null;
  released: Timestamp | null;
  slug: string | null;
  status: Generated<GameStatus>;
  updatedAt: Generated<Timestamp | null>;
}

export interface Notes {
  content: string;
  createdAt: Generated<Timestamp | null>;
  gameId: number;
  id: Generated<number>;
  title: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface Solutions {
  aiGenerated: Generated<boolean | null>;
  createdAt: Generated<Timestamp | null>;
  gameId: number;
  id: Generated<number>;
  problem: string;
  solution: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  games: Games;
  notes: Notes;
  solutions: Solutions;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const GameStatusArrayValues: [GameStatus, ...GameStatus[]] = ["abandoned","backlog","completed","in_progress"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.